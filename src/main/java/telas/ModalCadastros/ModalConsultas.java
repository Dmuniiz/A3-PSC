/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package telas.ModalCadastros;

import Entidades.Consulta;
import com.toedter.calendar.JCalendar;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

/**
 *
 * @author Davy
 */
public class ModalConsultas extends javax.swing.JFrame {

    private String labelId;

    private JDialog calendarDialog;
    private JCalendar calendar;

    private JComboBox<String> horarioComboBox;

    /**
     * Creates new form ModaConsultas
     */
    public ModalConsultas() {
        initComponents();
        try {
            Consulta.listarEspecialidade(this.cbEspecialidade);
        } catch (SQLException ex) {
            Logger.getLogger(ModalConsultas.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void obterIdPaciente(JLabel labelId) {
        this.labelId = labelId.getText();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnSelecionarData = new javax.swing.JButton();
        txtEscolherData = new javax.swing.JTextField();
        btnAgendarConsulta = new javax.swing.JButton();
        cbEspecialidade = new javax.swing.JComboBox<>();
        cbMedico = new javax.swing.JComboBox<>();
        btnSelecionarHorario = new javax.swing.JButton();
        txtSelecionarHorario = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);
        getContentPane().setLayout(null);

        btnSelecionarData.setText("Selecionar Data");
        btnSelecionarData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelecionarDataActionPerformed(evt);
            }
        });
        getContentPane().add(btnSelecionarData);
        btnSelecionarData.setBounds(30, 100, 170, 24);

        txtEscolherData.setToolTipText("");
        txtEscolherData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEscolherDataActionPerformed(evt);
            }
        });
        getContentPane().add(txtEscolherData);
        txtEscolherData.setBounds(260, 100, 170, 24);
        txtEscolherData.getAccessibleContext().setAccessibleName("");

        btnAgendarConsulta.setText("Agendar Consulta");
        btnAgendarConsulta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgendarConsultaActionPerformed(evt);
            }
        });
        getContentPane().add(btnAgendarConsulta);
        btnAgendarConsulta.setBounds(110, 250, 240, 24);

        cbEspecialidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbEspecialidadeActionPerformed(evt);
            }
        });
        getContentPane().add(cbEspecialidade);
        cbEspecialidade.setBounds(30, 30, 170, 30);

        cbMedico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbMedicoActionPerformed(evt);
            }
        });
        getContentPane().add(cbMedico);
        cbMedico.setBounds(260, 30, 170, 30);

        btnSelecionarHorario.setText("Selecionar Horário");
        btnSelecionarHorario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelecionarHorarioActionPerformed(evt);
            }
        });
        getContentPane().add(btnSelecionarHorario);
        btnSelecionarHorario.setBounds(30, 180, 180, 24);
        getContentPane().add(txtSelecionarHorario);
        txtSelecionarHorario.setBounds(250, 170, 180, 24);

        setSize(new java.awt.Dimension(475, 365));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents


    private void btnSelecionarDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelecionarDataActionPerformed
        // TODO add your handling code here:

        calendarDialog = new JDialog(this, "Calendário", false);

        calendarDialog.setSize(400, 400);
        calendarDialog.setLayout(new BorderLayout());
        calendarDialog.setResizable(false);

        calendar = new JCalendar();
        calendarDialog.add(calendar, BorderLayout.CENTER);

        JButton btnSelecionarData = new JButton("Selecionar");
        btnSelecionarData.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                Date dataSelecionada = calendar.getDate();
                Date dataAtual = new Date();

                if (dataSelecionada.getDate() <= dataAtual.getDate()) {
                    JOptionPane.showConfirmDialog(null, "Data inválida!!", "ERROR", JOptionPane.WARNING_MESSAGE);
                } else {
                    SimpleDateFormat formatarData = new SimpleDateFormat("dd-MM-yyyy");

                    txtEscolherData.setText(formatarData.format(dataSelecionada));
                    calendarDialog.dispose();
                }
            }
        });

        calendarDialog.add(btnSelecionarData, BorderLayout.SOUTH);
        calendarDialog.setLocationRelativeTo(this);
        calendarDialog.setVisible(true);

    }//GEN-LAST:event_btnSelecionarDataActionPerformed

    private void btnAgendarConsultaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgendarConsultaActionPerformed
        try {
            Consulta consulta = new Consulta();
//            
            consulta.setHora(horarioComboBox.getSelectedItem().toString());
            consulta.setData(txtEscolherData.getText());

            int obterIdbyNome = consulta.obterIdMedicoByNome(cbMedico.getSelectedItem().toString());
            consulta.setID_med(obterIdbyNome);
            consulta.setID_pac(Integer.parseInt(labelId));

            if (txtEscolherData.getText().isEmpty()) {
                JOptionPane.showConfirmDialog(null, "Data inválida!!", "ERROR", JOptionPane.WARNING_MESSAGE);
            } else {
                consulta.agendarConsulta();
                limparCampos();
            }

        } catch (SQLException | ParseException ex) {
            Logger.getLogger(ModalConsultas.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnAgendarConsultaActionPerformed

    public void limparCampos() {
        txtEscolherData.setText("");
        txtSelecionarHorario.setText("");
    }

    private void cbMedicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbMedicoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbMedicoActionPerformed

    private void cbEspecialidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbEspecialidadeActionPerformed
        String especialidadeSelecionada = cbEspecialidade.getSelectedItem().toString();
        try {
            cbMedico.removeAllItems();
            Consulta.listarMedicoByEspecialidade(especialidadeSelecionada, cbMedico);
        } catch (SQLException ex) {
            Logger.getLogger(ModalConsultas.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_cbEspecialidadeActionPerformed

    private void txtEscolherDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEscolherDataActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEscolherDataActionPerformed

    private void btnSelecionarHorarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelecionarHorarioActionPerformed
        // TODO add your handling code here:

        Consulta consulta = new Consulta();

        List<String> horarios = Arrays.asList("08:00", "09:00", "10:00", "11:00", "14:00", "15:00", "16:00", "17:00");

        List<String> filtrarHorariosDisponiveis = new ArrayList<>(horarios);

        try {
            List<String> horariosOcupados = Consulta.verificarHorarioConsulta(consulta.obterIdMedicoByNome(cbMedico.getSelectedItem().toString()), txtEscolherData.getText());
            filtrarHorariosDisponiveis.removeAll(horariosOcupados);

        } catch (SQLException ex) {
            Logger.getLogger(ModalConsultas.class.getName()).log(Level.SEVERE, null, ex);
        }
        horarioComboBox = new JComboBox<>(filtrarHorariosDisponiveis.toArray(new String[0]));

        if (filtrarHorariosDisponiveis.isEmpty()) {
            JOptionPane.showConfirmDialog(null, "A lista de consulta deste médico está cheia", "Ocupado", JOptionPane.WARNING_MESSAGE);
        } else {
            int result = JOptionPane.showConfirmDialog(null, horarioComboBox, "Selecione o Horário", JOptionPane.OK_CANCEL_OPTION);
            if (result == JOptionPane.OK_OPTION) {
                String horarioSelecionado = horarioComboBox.getSelectedItem().toString();

                if (horarioSelecionado != null) {
                    txtSelecionarHorario.setText(horarioSelecionado);
                }
            }
        }
    }//GEN-LAST:event_btnSelecionarHorarioActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ModalConsultas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ModalConsultas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ModalConsultas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ModalConsultas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                new ModalConsultas().setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgendarConsulta;
    private javax.swing.JButton btnSelecionarData;
    private javax.swing.JButton btnSelecionarHorario;
    private javax.swing.JComboBox<String> cbEspecialidade;
    private javax.swing.JComboBox<String> cbMedico;
    private javax.swing.JTextField txtEscolherData;
    private javax.swing.JTextField txtSelecionarHorario;
    // End of variables declaration//GEN-END:variables
}
